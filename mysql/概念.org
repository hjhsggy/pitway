* 存储引擎

- InnoDB
- Myisam

** 1. InnoDB支持事务, 后者不支持
** 2. InnoDB支持MVCC(多版本并发控制), 后者不支持
** 3. InnoDB支持外键, 后者不支持
** 4. InnoDB支持表行锁, 后者只支持表级锁
** 5. InnoDB表必须要有主键, 后者可以没有
** 6. InnoDB按照主键大小有序插入, 后者按照插入顺序存储

- 总结: 前者支持事务可以提供具有提交,回滚,崩盘恢复能力的事务安全, 但会带来写效率的损耗, 额外的磁盘占用

* 索引

** 原理: 

- [] Q1:索引为什么不采用一般二叉树

  *** A1:如果二叉树特殊化为链表, 查找相当于全表扫描, 效率降低, 平衡树相较二叉树, 查找效率稳定速度也更快一些

- [] Q2:索引为什么不采用B树而是B+树

  *** 存储结构: B树节点不仅存储键值还会存储数据, B+树仅叶子节点存储数据, 非叶子节点存储键值, 
  *** InnoDB默认的磁盘页大小为16KB, 这样在一个磁盘页上可以存储更多的节点, 减少磁盘IO
  *** B+树查询性能是稳定的, 数据都在叶子节点, 而B树分布在跟和叶子节点, 这样查找性能不稳定
  *** 除此之外, B+树的叶子节点通过指针相连,形成有序链表, 便于范围查询

- [] Q3:什么是回表
  
  *** 说到回表就必须了解下InnoDB索引实现, 分为两大类, 聚集索引和普通索引; 聚集索引

* 事务