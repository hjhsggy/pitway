* 常用数据类型底层实现

** slice 切片

- 切片和数组区别和联系

- [] 模型结构:

  切片:                       数组:
  
  +++++++                    +++++++++++++++++++++++++++++
  | ptr |          <-        |   |   |   |   |   |   |   |
  +++++++                    +++++++++++++++++++++++++++++
  | len |
  +++++++
  | cap |
  +++++++

  - 切片结构如上有三个属性, ptr指针指向底层数组, len 切片长度, cap容量
  - 空切片和nil, 两者底层数组都未分配空间
    - nil切片 ptr为空, var slice []byte
    - 空切片 ptr不为空 slice := make([]int, 0), slice := []int{}
  - 切片是引用类型, 扩容后底层数组地址会变

- [] 使用方法:



- [] 扩容机制:

  - slice这种数据结构便于使用和管理数据集合，可以理解为是一种“动态数组”，(类似于C++中 vector)
    slice也是围绕动态数组的概念来构建的。既然是动态数组，那么slice是如何扩容的呢？
  - 两条规则：
    - 容量小于1024个元素，那么扩容的时候slice的cap就翻番，乘以2；一旦元素个数超过1024个元素，增长因子就变成1.25，即每次增加原来容量的四分之一。
    - 如果扩容之后，还没有触及原数组的容量，那么，切片中的指针指向的位置，就还是原数组，
    - 如果扩容之后，超过了原数组的容量，那么，Go就会开辟一块新的内存，把原来的值拷贝过来，这种情况丝毫不会影响到原数组。

** map



** channel

